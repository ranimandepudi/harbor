import {
    Component,
    EventEmitter,
    OnDestroy,
    OnInit,
    Output,
} from '@angular/core';
import { SecurityhubService } from '../../../../../../../ng-swagger-gen/services/securityhub.service';
import { SecuritySummary } from '../../../../../../../ng-swagger-gen/models/security-summary';
import { MessageHandlerService } from '../../../../../shared/services/message-handler.service';
import * as Highcharts from 'highcharts';
import highchartsAccessibility from 'highcharts/modules/accessibility';
import { getDigestLink, severityText, VUL_ID } from '../security-hub.interface';
import { HAS_STYLE_MODE, StyleMode } from '../../../../../services/theme';
import { Subscription } from 'rxjs';
import {
    EventService,
    HarborEvent,
} from '../../../../../services/event-service/event.service';
import { TranslateService } from '@ngx-translate/core';
import { DangerousArtifact } from '../../../../../../../ng-swagger-gen/models/dangerous-artifact';
highchartsAccessibility(Highcharts);

@Component({
    selector: 'app-vulnerability-summary',
    templateUrl: './vulnerability-summary.component.html',
    styleUrls: ['./vulnerability-summary.component.scss'],
})
export class VulnerabilitySummaryComponent implements OnInit, OnDestroy {
    @Output()
    searchCVE = new EventEmitter<string>();
    @Output()
    searchRepo = new EventEmitter<DangerousArtifact>();
    securitySummary: SecuritySummary;
    readonly vulId: string = VUL_ID;
    readonly severityText = severityText;
    readonly getDigestLink = getDigestLink;
    harborEventSub: Subscription;
    constructor(
        private securityHubService: SecurityhubService,
        private messageHandler: MessageHandlerService,
        private event: EventService,
        private translate: TranslateService
    ) {}

    ngOnInit() {
        this.getSummary();
        if (!this.harborEventSub) {
            this.harborEventSub = this.event.subscribe(
                HarborEvent.THEME_CHANGE,
                () => {
                    if (this.securitySummary) {
                        this.setOption(this.securitySummary);
                    }
                }
            );
        }
    }
    ngOnDestroy() {
        if (this.harborEventSub) {
            this.harborEventSub.unsubscribe();
            this.harborEventSub = null;
        }
    }

    getSummary() {
        this.securityHubService
            .getSecuritySummary({
                withDangerousArtifact: true,
                withDangerousCve: true,
            })
            .subscribe({
                next: res => {
                    this.securitySummary = res;
                    this.setOption(res);
                },
                error: err => {
                    this.messageHandler.error(err);
                },
            });
    }

    setOption(summary: SecuritySummary) {
        const [severity, c, h, m, l, n, u] = [
            'VULNERABILITY.GRID.COLUMN_SEVERITY',
            'VULNERABILITY.SEVERITY.CRITICAL',
            'VULNERABILITY.SEVERITY.HIGH',
            'VULNERABILITY.SEVERITY.MEDIUM',
            'VULNERABILITY.SEVERITY.LOW',
            'VULNERABILITY.SEVERITY.NONE',
            'UNKNOWN',
        ];
        this.translate.get([severity, c, h, m, l, n, u]).subscribe(res => {
            Highcharts.chart('pie-chart', {
                credits: {
                    enabled: false,
                },
                chart: {
                    backgroundColor: 'transparent',
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    type: 'pie',
                },
                title: {
                    text: '',
                },
                tooltip: {
                    pointFormat: '<b>{point.percentage:.1f}%</b>',
                },
                plotOptions: {
                    pie: {
                        dataLabels: {
                            enabled: false,
                        },
                        showInLegend: true,
                        borderWidth: 0,
                    },
                },
                legend: {
                    align: 'left',
                    floating: true,
                    symbolRadius: 2,
                    itemStyle: {
                        fontSize: '12px',
                        fontWeight: '100',
                        color: this.getColorByTheme(),
                    },
                    width: '60%',
                },
                series: [
                    {
                        innerSize: '60%',
                        name: res[severity],
                        type: 'pie',
                        center: ['80%', '50%'],
                        data: [
                            {
                                name: res[c],
                                y: summary?.critical_cnt || 0,
                                color: 'red',
                            },
                            {
                                name: res[h],
                                y: summary?.high_cnt || 0,
                                color: '#e64524',
                            },
                            {
                                name: res[m],
                                y: summary?.medium_cnt || 0,
                                color: 'orange',
                            },
                            {
                                name: res[l],
                                y: summary?.low_cnt || 0,
                                color: '#007CBB',
                            },
                            {
                                name: res[u],
                                y: summary?.unknown_cnt || 0,
                                color: 'grey',
                            },
                            {
                                name: res[n],
                                y: summary?.none_cnt || 0,
                                color: 'green',
                            },
                        ],
                    },
                ],
            });
        });
    }

    searchCVEClick(cveId: string) {
        this.searchCVE.emit(cveId);
    }

    searchRepoClick(artifact: DangerousArtifact) {
        this.searchRepo.emit(artifact);
    }

    getColorByTheme(): string {
        return localStorage?.getItem(HAS_STYLE_MODE) === StyleMode.LIGHT
            ? '#000'
            : '#fff';
    }
}
